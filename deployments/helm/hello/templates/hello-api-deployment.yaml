apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{ .Values.api.deployment.name }}'
  labels:
    app: '{{ .Values.api.name }}'
    component: '{{ .Values.api.deployment.name }}'
spec:
  replicas: {{ .Values.api.deployment.hpa.minReplicaCount }}
  selector:
    matchLabels:
      app: '{{ .Values.api.name }}'
      component: '{{ .Values.api.deployment.name }}'
  template:
    metadata:
      {{- if .Values.useSvcMesh }}
      annotations:
        sidecar.istio.io/inject: '{{ .Values.api.deployment.injectAsmSideCar }}'
      {{- end }}
      labels:
        app: '{{ .Values.api.name }}'
        component: '{{ .Values.api.deployment.name }}'
      namespace: {{ .Values.gcp.namespace }}
    spec:
      containers:
        # ESP
        {{- if .Values.api.esp.useEsp }}
        - name: esp
          image: gcr.io/endpoints-release/endpoints-runtime:2
          args: [
            '--listener_port', '{{.Values.api.esp.port}}',
            '--backend', 'grpc://127.0.0.1:{{ .Values.api.deployment.grpcPort }}',
            '--service', '{{.Values.api.esp.host}}',
            '--rollout_strategy', 'managed',
            '--healthz', '/healthz',
            '--service_account_key', '/etc/esp/creds/credentials.json',
            {{- if .Values.api.esp.useHttps }}
            '--ssl_server_cert_path', '/etc/esp/ssl',
            {{- end }}
            {{- if .Values.api.esp.debug }}
            '--enable_debug'
            {{- end }}
          ]
          ports:
            - name: port-esp
              containerPort: {{.Values.api.esp.port}}
          volumeMounts:
            - name: hello-sa-secret
              mountPath: /etc/esp/creds
              readOnly: true
            {{- if .Values.api.esp.useHttps }}
            - name: hello-tls-secret
              mountPath: /etc/esp/ssl
              readOnly: true
            {{- end }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.api.esp.port }}
              scheme: {{ if .Values.api.esp.useHttps }}HTTPS{{ else }}HTTP{{ end }}
            initialDelaySeconds: 50
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.api.esp.port }}
              scheme: {{ if .Values.api.esp.useHttps }}HTTPS{{ else }}HTTP{{ end }}
            initialDelaySeconds: 50
            periodSeconds: 5
        {{- end }}
        #END ESP

        # API
        - name: {{ .Values.api.name }}
          image: {{ .Values.api.deployment.image }}
          imagePullPolicy: {{ .Values.api.deployment.pullPolicy }}
          ports:
          - containerPort: {{ .Values.api.deployment.grpcPort }}
            name: http
            #protocol: TCP
          command: ['/hello-api', '-mode=grpc', '-grpc-port={{ .Values.api.deployment.grpcPort }}', '-http-port={{ .Values.api.deployment.port }}']
          env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/volumes/secrets/sa/credentials.json"
            - name: SVC1_BASE_URL
              value: "http://hello-svc1-cluster-ip"
            - name: SVC2_BASE_URL
              value: "http://hello-svc2-cluster-ip"
          volumeMounts:
            - name: hello-sa-secret
              mountPath: /volumes/secrets/sa
              readOnly: true
          #livenessProbe:
          #  httpGet:
          #    path: /healthz
          #    port: {{ .Values.api.deployment.port }}
          #    scheme: HTTP
          #  initialDelaySeconds: 15
          #  periodSeconds: 5
          #readinessProbe:
          #  httpGet:
          #    path: /healthz
          #    port: {{ .Values.api.deployment.port }}
          #    scheme: HTTP
          #  initialDelaySeconds: 15
          #  periodSeconds: 5
        # END API
      volumes:
        - name: hello-sa-secret
          secret:
            secretName: sa-hello-api-credentials
        {{- if .Values.api.esp.useHttps }}
        - name: hello-tls-secret
          secret:
            secretName: hello-tls-credentials
            items:
              - key: tls.key
                path: server.key
              - key: tls.crt
                path: server.crt
        {{- end }}
