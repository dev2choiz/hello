apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{ .Values.api.deployment.name }}'
  labels:
    app: '{{ .Chart.Name }}'
    component: '{{ .Values.api.deployment.name }}'
spec:
  replicas: {{ .Values.api.deployment.hpa.minReplicaCount }}
  selector:
    matchLabels:
      app: '{{ .Chart.Name }}'
      component: '{{ .Values.api.deployment.name }}'
  template:
    metadata:
      labels:
        app: '{{ .Chart.Name }}'
        component: '{{ .Values.api.deployment.name }}'
      namespace: {{ .Values.gcp.namespace }}
    spec:
      containers:
        # ESP
        - name: esp
          image: gcr.io/endpoints-release/endpoints-runtime:2.29.1
          args: [
              '--listener_port', '{{.Values.api.esp.port}}',
              '--backend', '127.0.0.1:{{ .Values.api.deployment.port.http }}',
              '--service', '{{.Values.api.esp.host}}',
              '--rollout_strategy', 'managed',
              '--service_account_key', '/etc/esp/creds/credentials.json',
              {{ if .Values.api.esp.useHttps }}
              '--ssl_server_cert_path', '/etc/esp/ssl',
              {{ end }}
              #'--enable_debug'
          ]
          ports:
            - name: port-esp
              containerPort: {{.Values.api.esp.port}}
          volumeMounts:
            - name: hello-sa-secret
              mountPath: /etc/esp/creds
              readOnly: true
            - name: hello-tls-secret
              mountPath: /etc/esp/ssl
              readOnly: true
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.api.esp.port }}
              scheme: {{ if .Values.api.esp.useHttps }}HTTPS{{ else }}HTTP{{ end }}
            initialDelaySeconds: 20
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.api.esp.port }}
              scheme: {{ if .Values.api.esp.useHttps }}HTTPS{{ else }}HTTP{{ end }}
            initialDelaySeconds: 20
            periodSeconds: 5
        #END ESP

        # API
        - name: {{ .Chart.Name }}
          image: {{ .Values.api.deployment.image }}
          imagePullPolicy: {{ .Values.api.deployment.pullPolicy }}
          ports:
          - containerPort: {{ .Values.api.deployment.port.http }}
            name: http
            #protocol: TCP
          env:
            - name: PORT
              value: "8080"
            - name: OTHER_VARR
              value: "test"
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/volumes/secrets/sa/credentials.json"
            - name: COPY_ENV_VAR_1
              valueFrom:
                configMapKeyRef:
                  key: ENV_VAR_1
                  name: configmap-env
          envFrom:
            - configMapRef:
                name: configmap-env
          volumeMounts:
            - name: volume-empty-dir
              mountPath: /volumes/empty-dir
            - name: volume-configmap-file
              mountPath: /volumes/config-map
            - name: volume-secrets-fake-credentials
              mountPath: /volumes/secrets/fake-credentials
            - name: hello-sa-secret
              mountPath: /volumes/secrets/sa
          #livenessProbe:
          #  httpGet:
          #    path: /healthz
          #    port: {{.Values.api.deployment.port.http}}
          #    scheme: HTTP
          #  initialDelaySeconds: 15
          #  periodSeconds: 5
          #readinessProbe:
          #  httpGet:
          #    path: /healthz
          #    port: {{.Values.api.deployment.port.http}}
          #    scheme: HTTP
          #  initialDelaySeconds: 15
          #  periodSeconds: 5
        # END API
      volumes:
        - name: volume-empty-dir
          emptyDir: {}
        - name: volume-configmap-file
          configMap:
            name: configmap-files
        - name: volume-secrets-fake-credentials
          secret:
            secretName: {{ .Chart.Name }}-fake-credentials
        - name: hello-sa-secret
          secret:
            secretName: sa-hello-api-credentials
        - name: hello-tls-secret
          secret:
            secretName: hello-tls-credentials
            items:
              - key: tls.key
                path: server.key
              - key: tls.crt
                path: server.crt
