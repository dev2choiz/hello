steps:
  - id: 'Decrypt github private key'
    name: 'gcr.io/cloud-builders/gcloud'
    args:
        - 'kms'
        - 'decrypt'
        - '--location=${_GCP_REGION}'
        - '--keyring=${_KMS_KEYRING_NAME}'
        - '--key=${_KMS_KEY_NAME}'
        - '--ciphertext-file=${_GITHUB_PRIVATE_KEY_ENCRYPTED_PATH}'
        - '--plaintext-file=/root/.ssh/hello_github_deploy_id_rsa'
    volumes:
      - name: 'ssh'
        path: '/root/.ssh'

  - id: 'Setup github private key'
    name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        chmod 400 /root/.ssh/hello_github_deploy_id_rsa
        cat <<EOF >/root/.ssh/config
        Hostname github.com
        IdentityFile /root/.ssh/hello_github_deploy_id_rsa
        EOF
        ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts
    volumes:
      - name: 'ssh'
        path: '/root/.ssh'

  - id: 'Config git with ssh mode'
    name: 'gcr.io/cloud-builders/git'
    entrypoint: 'git'
    args:
      - 'config'
      - '--global'
      - '--add'
      - 'url.git@github.com:.insteadOf'
      - 'https://github.com/'
    volumes:
      - name: 'ssh'
        path: '/root/.ssh'

  - id: 'go mod init'
    name: golang:1.16
    args: ['go', 'mod', 'init', '${_FUNCTION_GO_MODULE}']
    dir: '${_FUNCTION_SOURCE_PATH}'

  - id: 'Generate Protobuf'
    name: 'gcr.io/$PROJECT_ID/protoc:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "generate protobuf in ./pkg/protobuf/"
        ./scripts/generate_proto.sh
        echo "copy ./pkg/protobuf to ./${_FUNCTION_SOURCE_PATH}/"
        cp -r ./pkg/protobuf "./${_FUNCTION_SOURCE_PATH}/"
        echo "add go.mod replace directive"
        echo "replace github.com/dev2choiz/hello/pkg/protobuf => ./protobuf" >> "./${_FUNCTION_SOURCE_PATH}/go.mod"

  - id: 'create go.mod in ./protobuf'
    name: golang:1.16
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd "./${_FUNCTION_SOURCE_PATH}/protobuf"
        go mod init github.com/dev2choiz/hello/pkg/protobuf

  - id: 'go get github.com/dev2choiz/hello@xxxxxx'
    name: golang:1.16
    args: ['go', 'get', 'github.com/dev2choiz/hello@${_APP_TAG}']
    env: ['GOPRIVATE=${_GITHUB_REPOSITORY}']
    dir: '${_FUNCTION_SOURCE_PATH}'
    volumes:
      - name: "ssh"
        path: '/root/.ssh'

  - id: 'go mod tidy'
    name: golang:1.16
    args: ['go', 'mod', 'tidy']
    dir: '${_FUNCTION_SOURCE_PATH}'
    volumes:
      - name: "ssh"
        path: '/root/.ssh'

  - id: 'go mod vendor'
    name: golang:1.16
    args: ['go', 'mod', 'vendor']
    dir: '${_FUNCTION_SOURCE_PATH}'
    volumes:
      - name: "ssh"
        path: '/root/.ssh'

  - id: 'Debug 1'
    name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    args:
        - '-c'
        - |
            echo "ls -la /root/.ssh ==>"
            ls -la /root/.ssh
            echo "ls -la /root/ ==>"
            ls -la /root/
            echo "ls -la /builder/home/ ==>"
            ls -la /builder/home/
            echo "whoami ==>"
            whoami
            echo "echo HOME ==>"
            echo "$$HOME"
            #echo "cat go.mod ==>"
            #cat go.mod
            echo "cd ==>"
            cd
            echo "pwd ==>"
            pwd
    volumes:
        - name: 'ssh'
          path: '/root/.ssh'
    dir: '${_FUNCTION_SOURCE_PATH}'

  - id: 'EnvVarFile'
    name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    args:
        - '-c'
        - |
            cp deployments/security/variables.${_APP_ENV}.yaml "./${_FUNCTION_SOURCE_PATH}/"
            ls -la "./${_FUNCTION_SOURCE_PATH}/"
            cat "./${_FUNCTION_SOURCE_PATH}/variables.${_APP_ENV}.yaml"

  - id: 'Debug 2'
    name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    args:
        - '-c'
        - |
            ls -la
            cat "./variables.${_APP_ENV}.yaml"
    dir: '${_FUNCTION_SOURCE_PATH}'

  - id: 'Deploy cloud function'
    name: 'gcr.io/cloud-builders/gcloud'
    args: ['functions', 'deploy', '${_FUNCTION_NAME}',
       '--source', '.',
       '--runtime', 'go116',
       '--region', '${_GCP_REGION}',
       '--entry-point', '${_ENTRYPOINT}',
       '--trigger-topic', '${_TRIGGER_TOPIC}',
       '--timeout', '30s',
       '--service-account', '${_SERVICE_ACCOUNT}',
       '--env-vars-file', './variables.${_APP_ENV}.yaml',
       #'--clear-vpc-connector'
       ]
    dir: '${_FUNCTION_SOURCE_PATH}'
